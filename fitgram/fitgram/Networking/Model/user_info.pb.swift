// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: user_info.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Apisvr_GetUserProfileReq {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Apisvr_GetUserProfileResp {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var avatarURL: String = String()

  var nickname: String = String()

  var birthYear: Int32 = 0

  var gender: Int32 = 0

  var height: Double = 0

  var weight: Double = 0

  var activityLevel: Int32 = 0

  var goal: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Apisvr_UpdateUserProfileReq {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var optionalAvatarURL: Apisvr_UpdateUserProfileReq.OneOf_OptionalAvatarURL? = nil

  var avatarURL: String {
    get {
      if case .avatarURL(let v)? = optionalAvatarURL {return v}
      return String()
    }
    set {optionalAvatarURL = .avatarURL(newValue)}
  }

  var optionalNickname: Apisvr_UpdateUserProfileReq.OneOf_OptionalNickname? = nil

  var nickname: String {
    get {
      if case .nickname(let v)? = optionalNickname {return v}
      return String()
    }
    set {optionalNickname = .nickname(newValue)}
  }

  var optionalBirthYear: Apisvr_UpdateUserProfileReq.OneOf_OptionalBirthYear? = nil

  var birthYear: Int32 {
    get {
      if case .birthYear(let v)? = optionalBirthYear {return v}
      return 0
    }
    set {optionalBirthYear = .birthYear(newValue)}
  }

  var optionalGender: Apisvr_UpdateUserProfileReq.OneOf_OptionalGender? = nil

  var gender: Int32 {
    get {
      if case .gender(let v)? = optionalGender {return v}
      return 0
    }
    set {optionalGender = .gender(newValue)}
  }

  var optionalHeight: Apisvr_UpdateUserProfileReq.OneOf_OptionalHeight? = nil

  var height: Double {
    get {
      if case .height(let v)? = optionalHeight {return v}
      return 0
    }
    set {optionalHeight = .height(newValue)}
  }

  var optionalWeight: Apisvr_UpdateUserProfileReq.OneOf_OptionalWeight? = nil

  var weight: Double {
    get {
      if case .weight(let v)? = optionalWeight {return v}
      return 0
    }
    set {optionalWeight = .weight(newValue)}
  }

  var optionalActivityLevel: Apisvr_UpdateUserProfileReq.OneOf_OptionalActivityLevel? = nil

  var activityLevel: Int32 {
    get {
      if case .activityLevel(let v)? = optionalActivityLevel {return v}
      return 0
    }
    set {optionalActivityLevel = .activityLevel(newValue)}
  }

  var optionalGoal: Apisvr_UpdateUserProfileReq.OneOf_OptionalGoal? = nil

  var goal: Int32 {
    get {
      if case .goal(let v)? = optionalGoal {return v}
      return 0
    }
    set {optionalGoal = .goal(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_OptionalAvatarURL: Equatable {
    case avatarURL(String)

  #if !swift(>=4.1)
    static func ==(lhs: Apisvr_UpdateUserProfileReq.OneOf_OptionalAvatarURL, rhs: Apisvr_UpdateUserProfileReq.OneOf_OptionalAvatarURL) -> Bool {
      switch (lhs, rhs) {
      case (.avatarURL(let l), .avatarURL(let r)): return l == r
      }
    }
  #endif
  }

  enum OneOf_OptionalNickname: Equatable {
    case nickname(String)

  #if !swift(>=4.1)
    static func ==(lhs: Apisvr_UpdateUserProfileReq.OneOf_OptionalNickname, rhs: Apisvr_UpdateUserProfileReq.OneOf_OptionalNickname) -> Bool {
      switch (lhs, rhs) {
      case (.nickname(let l), .nickname(let r)): return l == r
      }
    }
  #endif
  }

  enum OneOf_OptionalBirthYear: Equatable {
    case birthYear(Int32)

  #if !swift(>=4.1)
    static func ==(lhs: Apisvr_UpdateUserProfileReq.OneOf_OptionalBirthYear, rhs: Apisvr_UpdateUserProfileReq.OneOf_OptionalBirthYear) -> Bool {
      switch (lhs, rhs) {
      case (.birthYear(let l), .birthYear(let r)): return l == r
      }
    }
  #endif
  }

  enum OneOf_OptionalGender: Equatable {
    case gender(Int32)

  #if !swift(>=4.1)
    static func ==(lhs: Apisvr_UpdateUserProfileReq.OneOf_OptionalGender, rhs: Apisvr_UpdateUserProfileReq.OneOf_OptionalGender) -> Bool {
      switch (lhs, rhs) {
      case (.gender(let l), .gender(let r)): return l == r
      }
    }
  #endif
  }

  enum OneOf_OptionalHeight: Equatable {
    case height(Double)

  #if !swift(>=4.1)
    static func ==(lhs: Apisvr_UpdateUserProfileReq.OneOf_OptionalHeight, rhs: Apisvr_UpdateUserProfileReq.OneOf_OptionalHeight) -> Bool {
      switch (lhs, rhs) {
      case (.height(let l), .height(let r)): return l == r
      }
    }
  #endif
  }

  enum OneOf_OptionalWeight: Equatable {
    case weight(Double)

  #if !swift(>=4.1)
    static func ==(lhs: Apisvr_UpdateUserProfileReq.OneOf_OptionalWeight, rhs: Apisvr_UpdateUserProfileReq.OneOf_OptionalWeight) -> Bool {
      switch (lhs, rhs) {
      case (.weight(let l), .weight(let r)): return l == r
      }
    }
  #endif
  }

  enum OneOf_OptionalActivityLevel: Equatable {
    case activityLevel(Int32)

  #if !swift(>=4.1)
    static func ==(lhs: Apisvr_UpdateUserProfileReq.OneOf_OptionalActivityLevel, rhs: Apisvr_UpdateUserProfileReq.OneOf_OptionalActivityLevel) -> Bool {
      switch (lhs, rhs) {
      case (.activityLevel(let l), .activityLevel(let r)): return l == r
      }
    }
  #endif
  }

  enum OneOf_OptionalGoal: Equatable {
    case goal(Int32)

  #if !swift(>=4.1)
    static func ==(lhs: Apisvr_UpdateUserProfileReq.OneOf_OptionalGoal, rhs: Apisvr_UpdateUserProfileReq.OneOf_OptionalGoal) -> Bool {
      switch (lhs, rhs) {
      case (.goal(let l), .goal(let r)): return l == r
      }
    }
  #endif
  }

  init() {}
}

struct Apisvr_UpdateUserProfileResp {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Apisvr_GetUserFavouriteItemReq {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var itemType: Int32 = 0

  var offset: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Apisvr_FavouriteItem {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var itemID: Int32 = 0

  var imgURL: String = String()

  var name: String = String()

  var energy: Double = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Apisvr_GetUserFavouriteItemResp {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var items: [Apisvr_FavouriteItem] = []

  var total: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Apisvr_AddUserFavouriteItemReq {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var itemType: Int32 = 0

  var itemID: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Apisvr_AddUserFavouriteItemResp {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Apisvr_RemoveFavouriteItemReq {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var itemType: Int32 = 0

  var itemID: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Apisvr_RemoveUserFavouriteItemResp {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "apisvr"

extension Apisvr_GetUserProfileReq: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetUserProfileReq"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Apisvr_GetUserProfileReq, rhs: Apisvr_GetUserProfileReq) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Apisvr_GetUserProfileResp: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetUserProfileResp"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "avatar_url"),
    2: .same(proto: "nickname"),
    3: .standard(proto: "birth_year"),
    4: .same(proto: "gender"),
    5: .same(proto: "height"),
    6: .same(proto: "weight"),
    7: .standard(proto: "activity_level"),
    8: .same(proto: "goal"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.avatarURL)
      case 2: try decoder.decodeSingularStringField(value: &self.nickname)
      case 3: try decoder.decodeSingularInt32Field(value: &self.birthYear)
      case 4: try decoder.decodeSingularInt32Field(value: &self.gender)
      case 5: try decoder.decodeSingularDoubleField(value: &self.height)
      case 6: try decoder.decodeSingularDoubleField(value: &self.weight)
      case 7: try decoder.decodeSingularInt32Field(value: &self.activityLevel)
      case 8: try decoder.decodeSingularInt32Field(value: &self.goal)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.avatarURL.isEmpty {
      try visitor.visitSingularStringField(value: self.avatarURL, fieldNumber: 1)
    }
    if !self.nickname.isEmpty {
      try visitor.visitSingularStringField(value: self.nickname, fieldNumber: 2)
    }
    if self.birthYear != 0 {
      try visitor.visitSingularInt32Field(value: self.birthYear, fieldNumber: 3)
    }
    if self.gender != 0 {
      try visitor.visitSingularInt32Field(value: self.gender, fieldNumber: 4)
    }
    if self.height != 0 {
      try visitor.visitSingularDoubleField(value: self.height, fieldNumber: 5)
    }
    if self.weight != 0 {
      try visitor.visitSingularDoubleField(value: self.weight, fieldNumber: 6)
    }
    if self.activityLevel != 0 {
      try visitor.visitSingularInt32Field(value: self.activityLevel, fieldNumber: 7)
    }
    if self.goal != 0 {
      try visitor.visitSingularInt32Field(value: self.goal, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Apisvr_GetUserProfileResp, rhs: Apisvr_GetUserProfileResp) -> Bool {
    if lhs.avatarURL != rhs.avatarURL {return false}
    if lhs.nickname != rhs.nickname {return false}
    if lhs.birthYear != rhs.birthYear {return false}
    if lhs.gender != rhs.gender {return false}
    if lhs.height != rhs.height {return false}
    if lhs.weight != rhs.weight {return false}
    if lhs.activityLevel != rhs.activityLevel {return false}
    if lhs.goal != rhs.goal {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Apisvr_UpdateUserProfileReq: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UpdateUserProfileReq"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "avatar_url"),
    2: .same(proto: "nickname"),
    3: .standard(proto: "birth_year"),
    4: .same(proto: "gender"),
    5: .same(proto: "height"),
    6: .same(proto: "weight"),
    7: .standard(proto: "activity_level"),
    8: .same(proto: "goal"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1:
        if self.optionalAvatarURL != nil {try decoder.handleConflictingOneOf()}
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if let v = v {self.optionalAvatarURL = .avatarURL(v)}
      case 2:
        if self.optionalNickname != nil {try decoder.handleConflictingOneOf()}
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if let v = v {self.optionalNickname = .nickname(v)}
      case 3:
        if self.optionalBirthYear != nil {try decoder.handleConflictingOneOf()}
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {self.optionalBirthYear = .birthYear(v)}
      case 4:
        if self.optionalGender != nil {try decoder.handleConflictingOneOf()}
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {self.optionalGender = .gender(v)}
      case 5:
        if self.optionalHeight != nil {try decoder.handleConflictingOneOf()}
        var v: Double?
        try decoder.decodeSingularDoubleField(value: &v)
        if let v = v {self.optionalHeight = .height(v)}
      case 6:
        if self.optionalWeight != nil {try decoder.handleConflictingOneOf()}
        var v: Double?
        try decoder.decodeSingularDoubleField(value: &v)
        if let v = v {self.optionalWeight = .weight(v)}
      case 7:
        if self.optionalActivityLevel != nil {try decoder.handleConflictingOneOf()}
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {self.optionalActivityLevel = .activityLevel(v)}
      case 8:
        if self.optionalGoal != nil {try decoder.handleConflictingOneOf()}
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {self.optionalGoal = .goal(v)}
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if case .avatarURL(let v)? = self.optionalAvatarURL {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    if case .nickname(let v)? = self.optionalNickname {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }
    if case .birthYear(let v)? = self.optionalBirthYear {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 3)
    }
    if case .gender(let v)? = self.optionalGender {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 4)
    }
    if case .height(let v)? = self.optionalHeight {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 5)
    }
    if case .weight(let v)? = self.optionalWeight {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 6)
    }
    if case .activityLevel(let v)? = self.optionalActivityLevel {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 7)
    }
    if case .goal(let v)? = self.optionalGoal {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Apisvr_UpdateUserProfileReq, rhs: Apisvr_UpdateUserProfileReq) -> Bool {
    if lhs.optionalAvatarURL != rhs.optionalAvatarURL {return false}
    if lhs.optionalNickname != rhs.optionalNickname {return false}
    if lhs.optionalBirthYear != rhs.optionalBirthYear {return false}
    if lhs.optionalGender != rhs.optionalGender {return false}
    if lhs.optionalHeight != rhs.optionalHeight {return false}
    if lhs.optionalWeight != rhs.optionalWeight {return false}
    if lhs.optionalActivityLevel != rhs.optionalActivityLevel {return false}
    if lhs.optionalGoal != rhs.optionalGoal {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Apisvr_UpdateUserProfileResp: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UpdateUserProfileResp"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Apisvr_UpdateUserProfileResp, rhs: Apisvr_UpdateUserProfileResp) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Apisvr_GetUserFavouriteItemReq: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetUserFavouriteItemReq"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "item_type"),
    2: .same(proto: "offset"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.itemType)
      case 2: try decoder.decodeSingularInt32Field(value: &self.offset)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.itemType != 0 {
      try visitor.visitSingularInt32Field(value: self.itemType, fieldNumber: 1)
    }
    if self.offset != 0 {
      try visitor.visitSingularInt32Field(value: self.offset, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Apisvr_GetUserFavouriteItemReq, rhs: Apisvr_GetUserFavouriteItemReq) -> Bool {
    if lhs.itemType != rhs.itemType {return false}
    if lhs.offset != rhs.offset {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Apisvr_FavouriteItem: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".FavouriteItem"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "item_id"),
    2: .standard(proto: "img_url"),
    3: .same(proto: "name"),
    4: .same(proto: "energy"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.itemID)
      case 2: try decoder.decodeSingularStringField(value: &self.imgURL)
      case 3: try decoder.decodeSingularStringField(value: &self.name)
      case 4: try decoder.decodeSingularDoubleField(value: &self.energy)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.itemID != 0 {
      try visitor.visitSingularInt32Field(value: self.itemID, fieldNumber: 1)
    }
    if !self.imgURL.isEmpty {
      try visitor.visitSingularStringField(value: self.imgURL, fieldNumber: 2)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 3)
    }
    if self.energy != 0 {
      try visitor.visitSingularDoubleField(value: self.energy, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Apisvr_FavouriteItem, rhs: Apisvr_FavouriteItem) -> Bool {
    if lhs.itemID != rhs.itemID {return false}
    if lhs.imgURL != rhs.imgURL {return false}
    if lhs.name != rhs.name {return false}
    if lhs.energy != rhs.energy {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Apisvr_GetUserFavouriteItemResp: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetUserFavouriteItemResp"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "items"),
    2: .same(proto: "total"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.items)
      case 2: try decoder.decodeSingularInt32Field(value: &self.total)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.items.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.items, fieldNumber: 1)
    }
    if self.total != 0 {
      try visitor.visitSingularInt32Field(value: self.total, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Apisvr_GetUserFavouriteItemResp, rhs: Apisvr_GetUserFavouriteItemResp) -> Bool {
    if lhs.items != rhs.items {return false}
    if lhs.total != rhs.total {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Apisvr_AddUserFavouriteItemReq: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AddUserFavouriteItemReq"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "item_type"),
    2: .standard(proto: "item_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.itemType)
      case 2: try decoder.decodeSingularInt32Field(value: &self.itemID)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.itemType != 0 {
      try visitor.visitSingularInt32Field(value: self.itemType, fieldNumber: 1)
    }
    if self.itemID != 0 {
      try visitor.visitSingularInt32Field(value: self.itemID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Apisvr_AddUserFavouriteItemReq, rhs: Apisvr_AddUserFavouriteItemReq) -> Bool {
    if lhs.itemType != rhs.itemType {return false}
    if lhs.itemID != rhs.itemID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Apisvr_AddUserFavouriteItemResp: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AddUserFavouriteItemResp"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Apisvr_AddUserFavouriteItemResp, rhs: Apisvr_AddUserFavouriteItemResp) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Apisvr_RemoveFavouriteItemReq: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".RemoveFavouriteItemReq"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "item_type"),
    2: .standard(proto: "item_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.itemType)
      case 2: try decoder.decodeSingularInt32Field(value: &self.itemID)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.itemType != 0 {
      try visitor.visitSingularInt32Field(value: self.itemType, fieldNumber: 1)
    }
    if self.itemID != 0 {
      try visitor.visitSingularInt32Field(value: self.itemID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Apisvr_RemoveFavouriteItemReq, rhs: Apisvr_RemoveFavouriteItemReq) -> Bool {
    if lhs.itemType != rhs.itemType {return false}
    if lhs.itemID != rhs.itemID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Apisvr_RemoveUserFavouriteItemResp: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".RemoveUserFavouriteItemResp"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Apisvr_RemoveUserFavouriteItemResp, rhs: Apisvr_RemoveUserFavouriteItemResp) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
