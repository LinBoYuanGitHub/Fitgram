// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: user_info.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum Apisvr_Goal: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case unknownGoal // = 0
  case loseWeight // = 1
  case keepFit // = 2
  case gainMuscle // = 3
  case UNRECOGNIZED(Int)

  init() {
    self = .unknownGoal
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknownGoal
    case 1: self = .loseWeight
    case 2: self = .keepFit
    case 3: self = .gainMuscle
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .unknownGoal: return 0
    case .loseWeight: return 1
    case .keepFit: return 2
    case .gainMuscle: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Apisvr_Goal: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Apisvr_Goal] = [
    .unknownGoal,
    .loseWeight,
    .keepFit,
    .gainMuscle,
  ]
}

#endif  // swift(>=4.2)

enum Apisvr_Gender: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case unknownGender // = 0
  case female // = 1
  case male // = 2
  case UNRECOGNIZED(Int)

  init() {
    self = .unknownGender
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknownGender
    case 1: self = .female
    case 2: self = .male
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .unknownGender: return 0
    case .female: return 1
    case .male: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Apisvr_Gender: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Apisvr_Gender] = [
    .unknownGender,
    .female,
    .male,
  ]
}

#endif  // swift(>=4.2)

enum Apisvr_ActivityLevel: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case unknownLevel // = 0
  case extremelyInactive // = 1
  case sedentary // = 2
  case moderatelyActive // = 3
  case vigorouslyActive // = 4
  case UNRECOGNIZED(Int)

  init() {
    self = .unknownLevel
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknownLevel
    case 1: self = .extremelyInactive
    case 2: self = .sedentary
    case 3: self = .moderatelyActive
    case 4: self = .vigorouslyActive
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .unknownLevel: return 0
    case .extremelyInactive: return 1
    case .sedentary: return 2
    case .moderatelyActive: return 3
    case .vigorouslyActive: return 4
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Apisvr_ActivityLevel: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Apisvr_ActivityLevel] = [
    .unknownLevel,
    .extremelyInactive,
    .sedentary,
    .moderatelyActive,
    .vigorouslyActive,
  ]
}

#endif  // swift(>=4.2)

struct Apisvr_GetUserProfileReq {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Apisvr_GetUserProfileResp {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var avatarURL: String = String()

  var nickname: String = String()

  var birthYear: Int32 = 0

  var gender: Apisvr_Gender = .unknownGender

  var height: Float = 0

  var weight: Float = 0

  var activityLevel: Apisvr_ActivityLevel = .unknownLevel

  var goal: Apisvr_Goal = .unknownGoal

  var bodyType: Int32 = 0

  var targetBodyType: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Apisvr_UpdateUserProfileReq {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var optionalAvatarURL: Apisvr_UpdateUserProfileReq.OneOf_OptionalAvatarURL? = nil

  var avatarURL: String {
    get {
      if case .avatarURL(let v)? = optionalAvatarURL {return v}
      return String()
    }
    set {optionalAvatarURL = .avatarURL(newValue)}
  }

  var optionalNickname: Apisvr_UpdateUserProfileReq.OneOf_OptionalNickname? = nil

  var nickname: String {
    get {
      if case .nickname(let v)? = optionalNickname {return v}
      return String()
    }
    set {optionalNickname = .nickname(newValue)}
  }

  var optionalBirthYear: Apisvr_UpdateUserProfileReq.OneOf_OptionalBirthYear? = nil

  var birthYear: Int32 {
    get {
      if case .birthYear(let v)? = optionalBirthYear {return v}
      return 0
    }
    set {optionalBirthYear = .birthYear(newValue)}
  }

  var optionalGender: Apisvr_UpdateUserProfileReq.OneOf_OptionalGender? = nil

  var gender: Apisvr_Gender {
    get {
      if case .gender(let v)? = optionalGender {return v}
      return .unknownGender
    }
    set {optionalGender = .gender(newValue)}
  }

  var optionalHeight: Apisvr_UpdateUserProfileReq.OneOf_OptionalHeight? = nil

  var height: Float {
    get {
      if case .height(let v)? = optionalHeight {return v}
      return 0
    }
    set {optionalHeight = .height(newValue)}
  }

  var optionalWeight: Apisvr_UpdateUserProfileReq.OneOf_OptionalWeight? = nil

  var weight: Float {
    get {
      if case .weight(let v)? = optionalWeight {return v}
      return 0
    }
    set {optionalWeight = .weight(newValue)}
  }

  var optionalActivityLevel: Apisvr_UpdateUserProfileReq.OneOf_OptionalActivityLevel? = nil

  var activityLevel: Apisvr_ActivityLevel {
    get {
      if case .activityLevel(let v)? = optionalActivityLevel {return v}
      return .unknownLevel
    }
    set {optionalActivityLevel = .activityLevel(newValue)}
  }

  var optionalGoal: Apisvr_UpdateUserProfileReq.OneOf_OptionalGoal? = nil

  var goal: Apisvr_Goal {
    get {
      if case .goal(let v)? = optionalGoal {return v}
      return .unknownGoal
    }
    set {optionalGoal = .goal(newValue)}
  }

  var optionalBodyType: Apisvr_UpdateUserProfileReq.OneOf_OptionalBodyType? = nil

  var bodyType: Int32 {
    get {
      if case .bodyType(let v)? = optionalBodyType {return v}
      return 0
    }
    set {optionalBodyType = .bodyType(newValue)}
  }

  var optionalTargetBodyType: Apisvr_UpdateUserProfileReq.OneOf_OptionalTargetBodyType? = nil

  var targetBodyType: Int32 {
    get {
      if case .targetBodyType(let v)? = optionalTargetBodyType {return v}
      return 0
    }
    set {optionalTargetBodyType = .targetBodyType(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_OptionalAvatarURL: Equatable {
    case avatarURL(String)

  #if !swift(>=4.1)
    static func ==(lhs: Apisvr_UpdateUserProfileReq.OneOf_OptionalAvatarURL, rhs: Apisvr_UpdateUserProfileReq.OneOf_OptionalAvatarURL) -> Bool {
      switch (lhs, rhs) {
      case (.avatarURL(let l), .avatarURL(let r)): return l == r
      }
    }
  #endif
  }

  enum OneOf_OptionalNickname: Equatable {
    case nickname(String)

  #if !swift(>=4.1)
    static func ==(lhs: Apisvr_UpdateUserProfileReq.OneOf_OptionalNickname, rhs: Apisvr_UpdateUserProfileReq.OneOf_OptionalNickname) -> Bool {
      switch (lhs, rhs) {
      case (.nickname(let l), .nickname(let r)): return l == r
      }
    }
  #endif
  }

  enum OneOf_OptionalBirthYear: Equatable {
    case birthYear(Int32)

  #if !swift(>=4.1)
    static func ==(lhs: Apisvr_UpdateUserProfileReq.OneOf_OptionalBirthYear, rhs: Apisvr_UpdateUserProfileReq.OneOf_OptionalBirthYear) -> Bool {
      switch (lhs, rhs) {
      case (.birthYear(let l), .birthYear(let r)): return l == r
      }
    }
  #endif
  }

  enum OneOf_OptionalGender: Equatable {
    case gender(Apisvr_Gender)

  #if !swift(>=4.1)
    static func ==(lhs: Apisvr_UpdateUserProfileReq.OneOf_OptionalGender, rhs: Apisvr_UpdateUserProfileReq.OneOf_OptionalGender) -> Bool {
      switch (lhs, rhs) {
      case (.gender(let l), .gender(let r)): return l == r
      }
    }
  #endif
  }

  enum OneOf_OptionalHeight: Equatable {
    case height(Float)

  #if !swift(>=4.1)
    static func ==(lhs: Apisvr_UpdateUserProfileReq.OneOf_OptionalHeight, rhs: Apisvr_UpdateUserProfileReq.OneOf_OptionalHeight) -> Bool {
      switch (lhs, rhs) {
      case (.height(let l), .height(let r)): return l == r
      }
    }
  #endif
  }

  enum OneOf_OptionalWeight: Equatable {
    case weight(Float)

  #if !swift(>=4.1)
    static func ==(lhs: Apisvr_UpdateUserProfileReq.OneOf_OptionalWeight, rhs: Apisvr_UpdateUserProfileReq.OneOf_OptionalWeight) -> Bool {
      switch (lhs, rhs) {
      case (.weight(let l), .weight(let r)): return l == r
      }
    }
  #endif
  }

  enum OneOf_OptionalActivityLevel: Equatable {
    case activityLevel(Apisvr_ActivityLevel)

  #if !swift(>=4.1)
    static func ==(lhs: Apisvr_UpdateUserProfileReq.OneOf_OptionalActivityLevel, rhs: Apisvr_UpdateUserProfileReq.OneOf_OptionalActivityLevel) -> Bool {
      switch (lhs, rhs) {
      case (.activityLevel(let l), .activityLevel(let r)): return l == r
      }
    }
  #endif
  }

  enum OneOf_OptionalGoal: Equatable {
    case goal(Apisvr_Goal)

  #if !swift(>=4.1)
    static func ==(lhs: Apisvr_UpdateUserProfileReq.OneOf_OptionalGoal, rhs: Apisvr_UpdateUserProfileReq.OneOf_OptionalGoal) -> Bool {
      switch (lhs, rhs) {
      case (.goal(let l), .goal(let r)): return l == r
      }
    }
  #endif
  }

  enum OneOf_OptionalBodyType: Equatable {
    case bodyType(Int32)

  #if !swift(>=4.1)
    static func ==(lhs: Apisvr_UpdateUserProfileReq.OneOf_OptionalBodyType, rhs: Apisvr_UpdateUserProfileReq.OneOf_OptionalBodyType) -> Bool {
      switch (lhs, rhs) {
      case (.bodyType(let l), .bodyType(let r)): return l == r
      }
    }
  #endif
  }

  enum OneOf_OptionalTargetBodyType: Equatable {
    case targetBodyType(Int32)

  #if !swift(>=4.1)
    static func ==(lhs: Apisvr_UpdateUserProfileReq.OneOf_OptionalTargetBodyType, rhs: Apisvr_UpdateUserProfileReq.OneOf_OptionalTargetBodyType) -> Bool {
      switch (lhs, rhs) {
      case (.targetBodyType(let l), .targetBodyType(let r)): return l == r
      }
    }
  #endif
  }

  init() {}
}

struct Apisvr_UpdateUserProfileResp {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Apisvr_GetFavouriteRecipesReq {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var offset: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Apisvr_FavouriteItem {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var foodID: Int32 = 0

  var imgURL: String = String()

  var foodName: String = String()

  var energy: Float = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Apisvr_GetFavouriteRecipesResp {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var recipes: [Apisvr_FavouriteItem] = []

  var total: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Apisvr_GetFavouriteRestaurantsReq {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var offset: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Apisvr_FavouriteRestaurant {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var restaurantID: Int32 = 0

  var restaurantImgURL: String = String()

  var restaurantName: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Apisvr_GetFavouriteRestaurantsResp {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var restaurants: [Apisvr_FavouriteRestaurant] = []

  var total: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Apisvr_GetFavouriteRestaurantMenusReq {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var restaurantID: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Apisvr_GetFavouriteRestaurantMenusResp {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var menus: [Apisvr_FavouriteItem] = []

  var total: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Apisvr_AddFavouriteItemReq {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var itemID: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Apisvr_AddFavouriteItemResp {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Apisvr_RemoveFavouriteItemReq {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var itemID: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Apisvr_RemoveUserFavouriteItemResp {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Apisvr_GetGoalDetailsReq {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Apisvr_GetGoalDetailsResp {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var recommendedEnergyInstake: Float = 0

  var recommendedWeightLoss: Float = 0

  var days: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Apisvr_LinkPersonalTrainerReq {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var coachID: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Apisvr_LinkPersonalTrainerResp {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Apisvr_GetTrainerInfoReq {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var coachID: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Apisvr_GetTrainerInfoResp {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var name: String = String()

  var gymClubName: String = String()

  var yearsOfExp: Float = 0

  var qualifications: [String] = []

  var avatarURL: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "apisvr"

extension Apisvr_Goal: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNKNOWN_GOAL"),
    1: .same(proto: "LOSE_WEIGHT"),
    2: .same(proto: "KEEP_FIT"),
    3: .same(proto: "GAIN_MUSCLE"),
  ]
}

extension Apisvr_Gender: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNKNOWN_GENDER"),
    1: .same(proto: "FEMALE"),
    2: .same(proto: "MALE"),
  ]
}

extension Apisvr_ActivityLevel: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNKNOWN_LEVEL"),
    1: .same(proto: "EXTREMELY_INACTIVE"),
    2: .same(proto: "SEDENTARY"),
    3: .same(proto: "MODERATELY_ACTIVE"),
    4: .same(proto: "VIGOROUSLY_ACTIVE"),
  ]
}

extension Apisvr_GetUserProfileReq: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetUserProfileReq"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Apisvr_GetUserProfileReq, rhs: Apisvr_GetUserProfileReq) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Apisvr_GetUserProfileResp: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetUserProfileResp"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "avatar_url"),
    2: .same(proto: "nickname"),
    3: .standard(proto: "birth_year"),
    4: .same(proto: "gender"),
    5: .same(proto: "height"),
    6: .same(proto: "weight"),
    7: .standard(proto: "activity_level"),
    8: .same(proto: "goal"),
    9: .standard(proto: "body_type"),
    10: .standard(proto: "target_body_type"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.avatarURL)
      case 2: try decoder.decodeSingularStringField(value: &self.nickname)
      case 3: try decoder.decodeSingularInt32Field(value: &self.birthYear)
      case 4: try decoder.decodeSingularEnumField(value: &self.gender)
      case 5: try decoder.decodeSingularFloatField(value: &self.height)
      case 6: try decoder.decodeSingularFloatField(value: &self.weight)
      case 7: try decoder.decodeSingularEnumField(value: &self.activityLevel)
      case 8: try decoder.decodeSingularEnumField(value: &self.goal)
      case 9: try decoder.decodeSingularInt32Field(value: &self.bodyType)
      case 10: try decoder.decodeSingularInt32Field(value: &self.targetBodyType)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.avatarURL.isEmpty {
      try visitor.visitSingularStringField(value: self.avatarURL, fieldNumber: 1)
    }
    if !self.nickname.isEmpty {
      try visitor.visitSingularStringField(value: self.nickname, fieldNumber: 2)
    }
    if self.birthYear != 0 {
      try visitor.visitSingularInt32Field(value: self.birthYear, fieldNumber: 3)
    }
    if self.gender != .unknownGender {
      try visitor.visitSingularEnumField(value: self.gender, fieldNumber: 4)
    }
    if self.height != 0 {
      try visitor.visitSingularFloatField(value: self.height, fieldNumber: 5)
    }
    if self.weight != 0 {
      try visitor.visitSingularFloatField(value: self.weight, fieldNumber: 6)
    }
    if self.activityLevel != .unknownLevel {
      try visitor.visitSingularEnumField(value: self.activityLevel, fieldNumber: 7)
    }
    if self.goal != .unknownGoal {
      try visitor.visitSingularEnumField(value: self.goal, fieldNumber: 8)
    }
    if self.bodyType != 0 {
      try visitor.visitSingularInt32Field(value: self.bodyType, fieldNumber: 9)
    }
    if self.targetBodyType != 0 {
      try visitor.visitSingularInt32Field(value: self.targetBodyType, fieldNumber: 10)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Apisvr_GetUserProfileResp, rhs: Apisvr_GetUserProfileResp) -> Bool {
    if lhs.avatarURL != rhs.avatarURL {return false}
    if lhs.nickname != rhs.nickname {return false}
    if lhs.birthYear != rhs.birthYear {return false}
    if lhs.gender != rhs.gender {return false}
    if lhs.height != rhs.height {return false}
    if lhs.weight != rhs.weight {return false}
    if lhs.activityLevel != rhs.activityLevel {return false}
    if lhs.goal != rhs.goal {return false}
    if lhs.bodyType != rhs.bodyType {return false}
    if lhs.targetBodyType != rhs.targetBodyType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Apisvr_UpdateUserProfileReq: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UpdateUserProfileReq"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "avatar_url"),
    2: .same(proto: "nickname"),
    3: .standard(proto: "birth_year"),
    4: .same(proto: "gender"),
    5: .same(proto: "height"),
    6: .same(proto: "weight"),
    7: .standard(proto: "activity_level"),
    8: .same(proto: "goal"),
    9: .standard(proto: "body_type"),
    10: .standard(proto: "target_body_type"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1:
        if self.optionalAvatarURL != nil {try decoder.handleConflictingOneOf()}
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if let v = v {self.optionalAvatarURL = .avatarURL(v)}
      case 2:
        if self.optionalNickname != nil {try decoder.handleConflictingOneOf()}
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if let v = v {self.optionalNickname = .nickname(v)}
      case 3:
        if self.optionalBirthYear != nil {try decoder.handleConflictingOneOf()}
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {self.optionalBirthYear = .birthYear(v)}
      case 4:
        if self.optionalGender != nil {try decoder.handleConflictingOneOf()}
        var v: Apisvr_Gender?
        try decoder.decodeSingularEnumField(value: &v)
        if let v = v {self.optionalGender = .gender(v)}
      case 5:
        if self.optionalHeight != nil {try decoder.handleConflictingOneOf()}
        var v: Float?
        try decoder.decodeSingularFloatField(value: &v)
        if let v = v {self.optionalHeight = .height(v)}
      case 6:
        if self.optionalWeight != nil {try decoder.handleConflictingOneOf()}
        var v: Float?
        try decoder.decodeSingularFloatField(value: &v)
        if let v = v {self.optionalWeight = .weight(v)}
      case 7:
        if self.optionalActivityLevel != nil {try decoder.handleConflictingOneOf()}
        var v: Apisvr_ActivityLevel?
        try decoder.decodeSingularEnumField(value: &v)
        if let v = v {self.optionalActivityLevel = .activityLevel(v)}
      case 8:
        if self.optionalGoal != nil {try decoder.handleConflictingOneOf()}
        var v: Apisvr_Goal?
        try decoder.decodeSingularEnumField(value: &v)
        if let v = v {self.optionalGoal = .goal(v)}
      case 9:
        if self.optionalBodyType != nil {try decoder.handleConflictingOneOf()}
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {self.optionalBodyType = .bodyType(v)}
      case 10:
        if self.optionalTargetBodyType != nil {try decoder.handleConflictingOneOf()}
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {self.optionalTargetBodyType = .targetBodyType(v)}
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if case .avatarURL(let v)? = self.optionalAvatarURL {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    if case .nickname(let v)? = self.optionalNickname {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }
    if case .birthYear(let v)? = self.optionalBirthYear {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 3)
    }
    if case .gender(let v)? = self.optionalGender {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 4)
    }
    if case .height(let v)? = self.optionalHeight {
      try visitor.visitSingularFloatField(value: v, fieldNumber: 5)
    }
    if case .weight(let v)? = self.optionalWeight {
      try visitor.visitSingularFloatField(value: v, fieldNumber: 6)
    }
    if case .activityLevel(let v)? = self.optionalActivityLevel {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 7)
    }
    if case .goal(let v)? = self.optionalGoal {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 8)
    }
    if case .bodyType(let v)? = self.optionalBodyType {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 9)
    }
    if case .targetBodyType(let v)? = self.optionalTargetBodyType {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 10)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Apisvr_UpdateUserProfileReq, rhs: Apisvr_UpdateUserProfileReq) -> Bool {
    if lhs.optionalAvatarURL != rhs.optionalAvatarURL {return false}
    if lhs.optionalNickname != rhs.optionalNickname {return false}
    if lhs.optionalBirthYear != rhs.optionalBirthYear {return false}
    if lhs.optionalGender != rhs.optionalGender {return false}
    if lhs.optionalHeight != rhs.optionalHeight {return false}
    if lhs.optionalWeight != rhs.optionalWeight {return false}
    if lhs.optionalActivityLevel != rhs.optionalActivityLevel {return false}
    if lhs.optionalGoal != rhs.optionalGoal {return false}
    if lhs.optionalBodyType != rhs.optionalBodyType {return false}
    if lhs.optionalTargetBodyType != rhs.optionalTargetBodyType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Apisvr_UpdateUserProfileResp: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UpdateUserProfileResp"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Apisvr_UpdateUserProfileResp, rhs: Apisvr_UpdateUserProfileResp) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Apisvr_GetFavouriteRecipesReq: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetFavouriteRecipesReq"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "offset"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.offset)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.offset != 0 {
      try visitor.visitSingularInt32Field(value: self.offset, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Apisvr_GetFavouriteRecipesReq, rhs: Apisvr_GetFavouriteRecipesReq) -> Bool {
    if lhs.offset != rhs.offset {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Apisvr_FavouriteItem: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".FavouriteItem"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "food_id"),
    2: .standard(proto: "img_url"),
    3: .standard(proto: "food_name"),
    4: .same(proto: "energy"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.foodID)
      case 2: try decoder.decodeSingularStringField(value: &self.imgURL)
      case 3: try decoder.decodeSingularStringField(value: &self.foodName)
      case 4: try decoder.decodeSingularFloatField(value: &self.energy)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.foodID != 0 {
      try visitor.visitSingularInt32Field(value: self.foodID, fieldNumber: 1)
    }
    if !self.imgURL.isEmpty {
      try visitor.visitSingularStringField(value: self.imgURL, fieldNumber: 2)
    }
    if !self.foodName.isEmpty {
      try visitor.visitSingularStringField(value: self.foodName, fieldNumber: 3)
    }
    if self.energy != 0 {
      try visitor.visitSingularFloatField(value: self.energy, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Apisvr_FavouriteItem, rhs: Apisvr_FavouriteItem) -> Bool {
    if lhs.foodID != rhs.foodID {return false}
    if lhs.imgURL != rhs.imgURL {return false}
    if lhs.foodName != rhs.foodName {return false}
    if lhs.energy != rhs.energy {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Apisvr_GetFavouriteRecipesResp: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetFavouriteRecipesResp"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "recipes"),
    2: .same(proto: "total"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.recipes)
      case 2: try decoder.decodeSingularInt32Field(value: &self.total)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.recipes.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.recipes, fieldNumber: 1)
    }
    if self.total != 0 {
      try visitor.visitSingularInt32Field(value: self.total, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Apisvr_GetFavouriteRecipesResp, rhs: Apisvr_GetFavouriteRecipesResp) -> Bool {
    if lhs.recipes != rhs.recipes {return false}
    if lhs.total != rhs.total {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Apisvr_GetFavouriteRestaurantsReq: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetFavouriteRestaurantsReq"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "offset"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.offset)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.offset != 0 {
      try visitor.visitSingularInt32Field(value: self.offset, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Apisvr_GetFavouriteRestaurantsReq, rhs: Apisvr_GetFavouriteRestaurantsReq) -> Bool {
    if lhs.offset != rhs.offset {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Apisvr_FavouriteRestaurant: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".FavouriteRestaurant"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "restaurant_id"),
    2: .standard(proto: "restaurant_img_url"),
    3: .standard(proto: "restaurant_name"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.restaurantID)
      case 2: try decoder.decodeSingularStringField(value: &self.restaurantImgURL)
      case 3: try decoder.decodeSingularStringField(value: &self.restaurantName)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.restaurantID != 0 {
      try visitor.visitSingularInt32Field(value: self.restaurantID, fieldNumber: 1)
    }
    if !self.restaurantImgURL.isEmpty {
      try visitor.visitSingularStringField(value: self.restaurantImgURL, fieldNumber: 2)
    }
    if !self.restaurantName.isEmpty {
      try visitor.visitSingularStringField(value: self.restaurantName, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Apisvr_FavouriteRestaurant, rhs: Apisvr_FavouriteRestaurant) -> Bool {
    if lhs.restaurantID != rhs.restaurantID {return false}
    if lhs.restaurantImgURL != rhs.restaurantImgURL {return false}
    if lhs.restaurantName != rhs.restaurantName {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Apisvr_GetFavouriteRestaurantsResp: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetFavouriteRestaurantsResp"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "restaurants"),
    2: .same(proto: "total"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.restaurants)
      case 2: try decoder.decodeSingularInt32Field(value: &self.total)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.restaurants.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.restaurants, fieldNumber: 1)
    }
    if self.total != 0 {
      try visitor.visitSingularInt32Field(value: self.total, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Apisvr_GetFavouriteRestaurantsResp, rhs: Apisvr_GetFavouriteRestaurantsResp) -> Bool {
    if lhs.restaurants != rhs.restaurants {return false}
    if lhs.total != rhs.total {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Apisvr_GetFavouriteRestaurantMenusReq: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetFavouriteRestaurantMenusReq"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "restaurant_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.restaurantID)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.restaurantID != 0 {
      try visitor.visitSingularInt32Field(value: self.restaurantID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Apisvr_GetFavouriteRestaurantMenusReq, rhs: Apisvr_GetFavouriteRestaurantMenusReq) -> Bool {
    if lhs.restaurantID != rhs.restaurantID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Apisvr_GetFavouriteRestaurantMenusResp: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetFavouriteRestaurantMenusResp"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "menus"),
    2: .same(proto: "total"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.menus)
      case 2: try decoder.decodeSingularInt32Field(value: &self.total)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.menus.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.menus, fieldNumber: 1)
    }
    if self.total != 0 {
      try visitor.visitSingularInt32Field(value: self.total, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Apisvr_GetFavouriteRestaurantMenusResp, rhs: Apisvr_GetFavouriteRestaurantMenusResp) -> Bool {
    if lhs.menus != rhs.menus {return false}
    if lhs.total != rhs.total {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Apisvr_AddFavouriteItemReq: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AddFavouriteItemReq"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "item_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.itemID)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.itemID != 0 {
      try visitor.visitSingularInt32Field(value: self.itemID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Apisvr_AddFavouriteItemReq, rhs: Apisvr_AddFavouriteItemReq) -> Bool {
    if lhs.itemID != rhs.itemID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Apisvr_AddFavouriteItemResp: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AddFavouriteItemResp"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Apisvr_AddFavouriteItemResp, rhs: Apisvr_AddFavouriteItemResp) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Apisvr_RemoveFavouriteItemReq: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".RemoveFavouriteItemReq"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "item_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.itemID)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.itemID != 0 {
      try visitor.visitSingularInt32Field(value: self.itemID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Apisvr_RemoveFavouriteItemReq, rhs: Apisvr_RemoveFavouriteItemReq) -> Bool {
    if lhs.itemID != rhs.itemID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Apisvr_RemoveUserFavouriteItemResp: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".RemoveUserFavouriteItemResp"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Apisvr_RemoveUserFavouriteItemResp, rhs: Apisvr_RemoveUserFavouriteItemResp) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Apisvr_GetGoalDetailsReq: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetGoalDetailsReq"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Apisvr_GetGoalDetailsReq, rhs: Apisvr_GetGoalDetailsReq) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Apisvr_GetGoalDetailsResp: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetGoalDetailsResp"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "recommended_energy_instake"),
    2: .standard(proto: "recommended_weight_loss"),
    3: .same(proto: "days"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularFloatField(value: &self.recommendedEnergyInstake)
      case 2: try decoder.decodeSingularFloatField(value: &self.recommendedWeightLoss)
      case 3: try decoder.decodeSingularInt32Field(value: &self.days)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.recommendedEnergyInstake != 0 {
      try visitor.visitSingularFloatField(value: self.recommendedEnergyInstake, fieldNumber: 1)
    }
    if self.recommendedWeightLoss != 0 {
      try visitor.visitSingularFloatField(value: self.recommendedWeightLoss, fieldNumber: 2)
    }
    if self.days != 0 {
      try visitor.visitSingularInt32Field(value: self.days, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Apisvr_GetGoalDetailsResp, rhs: Apisvr_GetGoalDetailsResp) -> Bool {
    if lhs.recommendedEnergyInstake != rhs.recommendedEnergyInstake {return false}
    if lhs.recommendedWeightLoss != rhs.recommendedWeightLoss {return false}
    if lhs.days != rhs.days {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Apisvr_LinkPersonalTrainerReq: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".LinkPersonalTrainerReq"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "coach_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.coachID)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.coachID != 0 {
      try visitor.visitSingularInt32Field(value: self.coachID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Apisvr_LinkPersonalTrainerReq, rhs: Apisvr_LinkPersonalTrainerReq) -> Bool {
    if lhs.coachID != rhs.coachID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Apisvr_LinkPersonalTrainerResp: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".LinkPersonalTrainerResp"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Apisvr_LinkPersonalTrainerResp, rhs: Apisvr_LinkPersonalTrainerResp) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Apisvr_GetTrainerInfoReq: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetTrainerInfoReq"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "coach_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.coachID)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.coachID != 0 {
      try visitor.visitSingularInt32Field(value: self.coachID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Apisvr_GetTrainerInfoReq, rhs: Apisvr_GetTrainerInfoReq) -> Bool {
    if lhs.coachID != rhs.coachID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Apisvr_GetTrainerInfoResp: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetTrainerInfoResp"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .standard(proto: "gym_club_name"),
    3: .standard(proto: "years_of_exp"),
    4: .same(proto: "qualifications"),
    5: .standard(proto: "avatar_url"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.name)
      case 2: try decoder.decodeSingularStringField(value: &self.gymClubName)
      case 3: try decoder.decodeSingularFloatField(value: &self.yearsOfExp)
      case 4: try decoder.decodeRepeatedStringField(value: &self.qualifications)
      case 5: try decoder.decodeSingularStringField(value: &self.avatarURL)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if !self.gymClubName.isEmpty {
      try visitor.visitSingularStringField(value: self.gymClubName, fieldNumber: 2)
    }
    if self.yearsOfExp != 0 {
      try visitor.visitSingularFloatField(value: self.yearsOfExp, fieldNumber: 3)
    }
    if !self.qualifications.isEmpty {
      try visitor.visitRepeatedStringField(value: self.qualifications, fieldNumber: 4)
    }
    if !self.avatarURL.isEmpty {
      try visitor.visitSingularStringField(value: self.avatarURL, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Apisvr_GetTrainerInfoResp, rhs: Apisvr_GetTrainerInfoResp) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.gymClubName != rhs.gymClubName {return false}
    if lhs.yearsOfExp != rhs.yearsOfExp {return false}
    if lhs.qualifications != rhs.qualifications {return false}
    if lhs.avatarURL != rhs.avatarURL {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
