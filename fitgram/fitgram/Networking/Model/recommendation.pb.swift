// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: recommendation.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Apisvr_GetRecommendedRecipeReq {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var date: String = String()

  var dishType: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Apisvr_GetRecommendedRecipeResp {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var recipeID: Int32 = 0

  var sampleImgURL: String = String()

  var recipeName: String = String()

  var cookingTime: Int32 = 0

  var energy: Double = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Apisvr_GetRecommendedMealPlanReq {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var date: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Apisvr_RecommendedRecipeInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var recipeID: Int32 = 0

  var sampleImgURL: String = String()

  var recipeName: String = String()

  var cookingTime: Int32 = 0

  var energy: Double = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Apisvr_GetRecommendedMealPlanResp {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var breakfast: [Apisvr_RecommendedRecipeInfo] = []

  var lunch: [Apisvr_RecommendedRecipeInfo] = []

  var dinner: [Apisvr_RecommendedRecipeInfo] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Apisvr_AddCheckListItemReq {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var recommendedRecipeID: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Apisvr_AddCheckListItemResp {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Apisvr_GetCheckListItemReq {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var recommendedRecipeID: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Apisvr_IngredientInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var ingredientID: Int32 = 0

  var name: String = String()

  var isChecked: Bool = false

  var amount: Double = 0

  var unit: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Apisvr_GetCheckListItemResp {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var sampleImgURL: String = String()

  var recipeName: String = String()

  var energy: Double = 0

  var ingredients: [Apisvr_IngredientInfo] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Apisvr_IngredientCheckReq {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var recommendedRecipeID: Int32 = 0

  var ingredientID: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Apisvr_IngredientCheckResp {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Apisvr_IngredientUncheckReq {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var recommendedRecipeID: Int32 = 0

  var ingredientID: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Apisvr_IngredientUncheckResp {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Apisvr_GetAllIngredientsReq {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var recommendedRecipeIds: [Int32] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Apisvr_AllIngredientsInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var ingredientID: Int32 = 0

  var name: String = String()

  var mark: Bool = false

  var amount: Double = 0

  var totalAmount: Double = 0

  var unit: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Apisvr_GetAllIngredientsResp {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var ingredients: [Apisvr_AllIngredientsInfo] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "apisvr"

extension Apisvr_GetRecommendedRecipeReq: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetRecommendedRecipeReq"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "date"),
    2: .standard(proto: "dish_type"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.date)
      case 2: try decoder.decodeSingularInt32Field(value: &self.dishType)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.date.isEmpty {
      try visitor.visitSingularStringField(value: self.date, fieldNumber: 1)
    }
    if self.dishType != 0 {
      try visitor.visitSingularInt32Field(value: self.dishType, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Apisvr_GetRecommendedRecipeReq, rhs: Apisvr_GetRecommendedRecipeReq) -> Bool {
    if lhs.date != rhs.date {return false}
    if lhs.dishType != rhs.dishType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Apisvr_GetRecommendedRecipeResp: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetRecommendedRecipeResp"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "recipe_id"),
    2: .standard(proto: "sample_img_url"),
    3: .standard(proto: "recipe_name"),
    4: .standard(proto: "cooking_time"),
    5: .same(proto: "energy"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.recipeID)
      case 2: try decoder.decodeSingularStringField(value: &self.sampleImgURL)
      case 3: try decoder.decodeSingularStringField(value: &self.recipeName)
      case 4: try decoder.decodeSingularInt32Field(value: &self.cookingTime)
      case 5: try decoder.decodeSingularDoubleField(value: &self.energy)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.recipeID != 0 {
      try visitor.visitSingularInt32Field(value: self.recipeID, fieldNumber: 1)
    }
    if !self.sampleImgURL.isEmpty {
      try visitor.visitSingularStringField(value: self.sampleImgURL, fieldNumber: 2)
    }
    if !self.recipeName.isEmpty {
      try visitor.visitSingularStringField(value: self.recipeName, fieldNumber: 3)
    }
    if self.cookingTime != 0 {
      try visitor.visitSingularInt32Field(value: self.cookingTime, fieldNumber: 4)
    }
    if self.energy != 0 {
      try visitor.visitSingularDoubleField(value: self.energy, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Apisvr_GetRecommendedRecipeResp, rhs: Apisvr_GetRecommendedRecipeResp) -> Bool {
    if lhs.recipeID != rhs.recipeID {return false}
    if lhs.sampleImgURL != rhs.sampleImgURL {return false}
    if lhs.recipeName != rhs.recipeName {return false}
    if lhs.cookingTime != rhs.cookingTime {return false}
    if lhs.energy != rhs.energy {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Apisvr_GetRecommendedMealPlanReq: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetRecommendedMealPlanReq"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "date"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.date)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.date.isEmpty {
      try visitor.visitSingularStringField(value: self.date, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Apisvr_GetRecommendedMealPlanReq, rhs: Apisvr_GetRecommendedMealPlanReq) -> Bool {
    if lhs.date != rhs.date {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Apisvr_RecommendedRecipeInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".RecommendedRecipeInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "recipe_id"),
    2: .standard(proto: "sample_img_url"),
    3: .standard(proto: "recipe_name"),
    4: .standard(proto: "cooking_time"),
    5: .same(proto: "energy"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.recipeID)
      case 2: try decoder.decodeSingularStringField(value: &self.sampleImgURL)
      case 3: try decoder.decodeSingularStringField(value: &self.recipeName)
      case 4: try decoder.decodeSingularInt32Field(value: &self.cookingTime)
      case 5: try decoder.decodeSingularDoubleField(value: &self.energy)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.recipeID != 0 {
      try visitor.visitSingularInt32Field(value: self.recipeID, fieldNumber: 1)
    }
    if !self.sampleImgURL.isEmpty {
      try visitor.visitSingularStringField(value: self.sampleImgURL, fieldNumber: 2)
    }
    if !self.recipeName.isEmpty {
      try visitor.visitSingularStringField(value: self.recipeName, fieldNumber: 3)
    }
    if self.cookingTime != 0 {
      try visitor.visitSingularInt32Field(value: self.cookingTime, fieldNumber: 4)
    }
    if self.energy != 0 {
      try visitor.visitSingularDoubleField(value: self.energy, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Apisvr_RecommendedRecipeInfo, rhs: Apisvr_RecommendedRecipeInfo) -> Bool {
    if lhs.recipeID != rhs.recipeID {return false}
    if lhs.sampleImgURL != rhs.sampleImgURL {return false}
    if lhs.recipeName != rhs.recipeName {return false}
    if lhs.cookingTime != rhs.cookingTime {return false}
    if lhs.energy != rhs.energy {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Apisvr_GetRecommendedMealPlanResp: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetRecommendedMealPlanResp"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "breakfast"),
    2: .same(proto: "lunch"),
    3: .same(proto: "dinner"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.breakfast)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.lunch)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.dinner)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.breakfast.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.breakfast, fieldNumber: 1)
    }
    if !self.lunch.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.lunch, fieldNumber: 2)
    }
    if !self.dinner.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.dinner, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Apisvr_GetRecommendedMealPlanResp, rhs: Apisvr_GetRecommendedMealPlanResp) -> Bool {
    if lhs.breakfast != rhs.breakfast {return false}
    if lhs.lunch != rhs.lunch {return false}
    if lhs.dinner != rhs.dinner {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Apisvr_AddCheckListItemReq: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AddCheckListItemReq"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "recommended_recipe_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.recommendedRecipeID)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.recommendedRecipeID != 0 {
      try visitor.visitSingularInt32Field(value: self.recommendedRecipeID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Apisvr_AddCheckListItemReq, rhs: Apisvr_AddCheckListItemReq) -> Bool {
    if lhs.recommendedRecipeID != rhs.recommendedRecipeID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Apisvr_AddCheckListItemResp: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AddCheckListItemResp"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Apisvr_AddCheckListItemResp, rhs: Apisvr_AddCheckListItemResp) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Apisvr_GetCheckListItemReq: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetCheckListItemReq"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "recommended_recipe_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.recommendedRecipeID)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.recommendedRecipeID != 0 {
      try visitor.visitSingularInt32Field(value: self.recommendedRecipeID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Apisvr_GetCheckListItemReq, rhs: Apisvr_GetCheckListItemReq) -> Bool {
    if lhs.recommendedRecipeID != rhs.recommendedRecipeID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Apisvr_IngredientInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".IngredientInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "ingredient_id"),
    2: .same(proto: "name"),
    3: .standard(proto: "is_checked"),
    4: .same(proto: "amount"),
    5: .same(proto: "unit"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.ingredientID)
      case 2: try decoder.decodeSingularStringField(value: &self.name)
      case 3: try decoder.decodeSingularBoolField(value: &self.isChecked)
      case 4: try decoder.decodeSingularDoubleField(value: &self.amount)
      case 5: try decoder.decodeSingularStringField(value: &self.unit)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.ingredientID != 0 {
      try visitor.visitSingularInt32Field(value: self.ingredientID, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    if self.isChecked != false {
      try visitor.visitSingularBoolField(value: self.isChecked, fieldNumber: 3)
    }
    if self.amount != 0 {
      try visitor.visitSingularDoubleField(value: self.amount, fieldNumber: 4)
    }
    if !self.unit.isEmpty {
      try visitor.visitSingularStringField(value: self.unit, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Apisvr_IngredientInfo, rhs: Apisvr_IngredientInfo) -> Bool {
    if lhs.ingredientID != rhs.ingredientID {return false}
    if lhs.name != rhs.name {return false}
    if lhs.isChecked != rhs.isChecked {return false}
    if lhs.amount != rhs.amount {return false}
    if lhs.unit != rhs.unit {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Apisvr_GetCheckListItemResp: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetCheckListItemResp"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "sample_img_url"),
    2: .standard(proto: "recipe_name"),
    3: .same(proto: "energy"),
    4: .same(proto: "ingredients"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.sampleImgURL)
      case 2: try decoder.decodeSingularStringField(value: &self.recipeName)
      case 3: try decoder.decodeSingularDoubleField(value: &self.energy)
      case 4: try decoder.decodeRepeatedMessageField(value: &self.ingredients)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.sampleImgURL.isEmpty {
      try visitor.visitSingularStringField(value: self.sampleImgURL, fieldNumber: 1)
    }
    if !self.recipeName.isEmpty {
      try visitor.visitSingularStringField(value: self.recipeName, fieldNumber: 2)
    }
    if self.energy != 0 {
      try visitor.visitSingularDoubleField(value: self.energy, fieldNumber: 3)
    }
    if !self.ingredients.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.ingredients, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Apisvr_GetCheckListItemResp, rhs: Apisvr_GetCheckListItemResp) -> Bool {
    if lhs.sampleImgURL != rhs.sampleImgURL {return false}
    if lhs.recipeName != rhs.recipeName {return false}
    if lhs.energy != rhs.energy {return false}
    if lhs.ingredients != rhs.ingredients {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Apisvr_IngredientCheckReq: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".IngredientCheckReq"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "recommended_recipe_id"),
    2: .standard(proto: "ingredient_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.recommendedRecipeID)
      case 2: try decoder.decodeSingularInt32Field(value: &self.ingredientID)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.recommendedRecipeID != 0 {
      try visitor.visitSingularInt32Field(value: self.recommendedRecipeID, fieldNumber: 1)
    }
    if self.ingredientID != 0 {
      try visitor.visitSingularInt32Field(value: self.ingredientID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Apisvr_IngredientCheckReq, rhs: Apisvr_IngredientCheckReq) -> Bool {
    if lhs.recommendedRecipeID != rhs.recommendedRecipeID {return false}
    if lhs.ingredientID != rhs.ingredientID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Apisvr_IngredientCheckResp: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".IngredientCheckResp"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Apisvr_IngredientCheckResp, rhs: Apisvr_IngredientCheckResp) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Apisvr_IngredientUncheckReq: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".IngredientUncheckReq"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "recommended_recipe_id"),
    2: .standard(proto: "ingredient_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.recommendedRecipeID)
      case 2: try decoder.decodeSingularInt32Field(value: &self.ingredientID)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.recommendedRecipeID != 0 {
      try visitor.visitSingularInt32Field(value: self.recommendedRecipeID, fieldNumber: 1)
    }
    if self.ingredientID != 0 {
      try visitor.visitSingularInt32Field(value: self.ingredientID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Apisvr_IngredientUncheckReq, rhs: Apisvr_IngredientUncheckReq) -> Bool {
    if lhs.recommendedRecipeID != rhs.recommendedRecipeID {return false}
    if lhs.ingredientID != rhs.ingredientID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Apisvr_IngredientUncheckResp: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".IngredientUncheckResp"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Apisvr_IngredientUncheckResp, rhs: Apisvr_IngredientUncheckResp) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Apisvr_GetAllIngredientsReq: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetAllIngredientsReq"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "recommended_recipe_ids"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedInt32Field(value: &self.recommendedRecipeIds)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.recommendedRecipeIds.isEmpty {
      try visitor.visitPackedInt32Field(value: self.recommendedRecipeIds, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Apisvr_GetAllIngredientsReq, rhs: Apisvr_GetAllIngredientsReq) -> Bool {
    if lhs.recommendedRecipeIds != rhs.recommendedRecipeIds {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Apisvr_AllIngredientsInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AllIngredientsInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "ingredient_id"),
    2: .same(proto: "name"),
    3: .same(proto: "mark"),
    4: .same(proto: "amount"),
    5: .standard(proto: "total_amount"),
    6: .same(proto: "unit"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.ingredientID)
      case 2: try decoder.decodeSingularStringField(value: &self.name)
      case 3: try decoder.decodeSingularBoolField(value: &self.mark)
      case 4: try decoder.decodeSingularDoubleField(value: &self.amount)
      case 5: try decoder.decodeSingularDoubleField(value: &self.totalAmount)
      case 6: try decoder.decodeSingularStringField(value: &self.unit)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.ingredientID != 0 {
      try visitor.visitSingularInt32Field(value: self.ingredientID, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    if self.mark != false {
      try visitor.visitSingularBoolField(value: self.mark, fieldNumber: 3)
    }
    if self.amount != 0 {
      try visitor.visitSingularDoubleField(value: self.amount, fieldNumber: 4)
    }
    if self.totalAmount != 0 {
      try visitor.visitSingularDoubleField(value: self.totalAmount, fieldNumber: 5)
    }
    if !self.unit.isEmpty {
      try visitor.visitSingularStringField(value: self.unit, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Apisvr_AllIngredientsInfo, rhs: Apisvr_AllIngredientsInfo) -> Bool {
    if lhs.ingredientID != rhs.ingredientID {return false}
    if lhs.name != rhs.name {return false}
    if lhs.mark != rhs.mark {return false}
    if lhs.amount != rhs.amount {return false}
    if lhs.totalAmount != rhs.totalAmount {return false}
    if lhs.unit != rhs.unit {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Apisvr_GetAllIngredientsResp: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetAllIngredientsResp"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "ingredients"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.ingredients)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.ingredients.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.ingredients, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Apisvr_GetAllIngredientsResp, rhs: Apisvr_GetAllIngredientsResp) -> Bool {
    if lhs.ingredients != rhs.ingredients {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
