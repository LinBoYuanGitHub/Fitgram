//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: user_info.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import Dispatch
import Foundation
import SwiftGRPC
import SwiftProtobuf

internal protocol Apisvr_UserServiceGetUserProfileCall: ClientCallUnary {}

fileprivate final class Apisvr_UserServiceGetUserProfileCallBase: ClientCallUnaryBase<Apisvr_GetUserProfileReq, Apisvr_GetUserProfileResp>, Apisvr_UserServiceGetUserProfileCall {
  override class var method: String { return "/apisvr.UserService/GetUserProfile" }
}

internal protocol Apisvr_UserServiceUpdateUserProfileCall: ClientCallUnary {}

fileprivate final class Apisvr_UserServiceUpdateUserProfileCallBase: ClientCallUnaryBase<Apisvr_UpdateUserProfileReq, Apisvr_UpdateUserProfileResp>, Apisvr_UserServiceUpdateUserProfileCall {
  override class var method: String { return "/apisvr.UserService/UpdateUserProfile" }
}

internal protocol Apisvr_UserServiceGetUserFavouriteItemCall: ClientCallUnary {}

fileprivate final class Apisvr_UserServiceGetUserFavouriteItemCallBase: ClientCallUnaryBase<Apisvr_GetUserFavouriteItemReq, Apisvr_GetUserFavouriteItemResp>, Apisvr_UserServiceGetUserFavouriteItemCall {
  override class var method: String { return "/apisvr.UserService/GetUserFavouriteItem" }
}

internal protocol Apisvr_UserServiceAddUserFavouriteItemCall: ClientCallUnary {}

fileprivate final class Apisvr_UserServiceAddUserFavouriteItemCallBase: ClientCallUnaryBase<Apisvr_AddUserFavouriteItemReq, Apisvr_AddUserFavouriteItemResp>, Apisvr_UserServiceAddUserFavouriteItemCall {
  override class var method: String { return "/apisvr.UserService/AddUserFavouriteItem" }
}

internal protocol Apisvr_UserServiceRemoveFavouriteItemCall: ClientCallUnary {}

fileprivate final class Apisvr_UserServiceRemoveFavouriteItemCallBase: ClientCallUnaryBase<Apisvr_RemoveFavouriteItemReq, Apisvr_RemoveUserFavouriteItemResp>, Apisvr_UserServiceRemoveFavouriteItemCall {
  override class var method: String { return "/apisvr.UserService/RemoveFavouriteItem" }
}

internal protocol Apisvr_UserServiceGetGoalDetailsCall: ClientCallUnary {}

fileprivate final class Apisvr_UserServiceGetGoalDetailsCallBase: ClientCallUnaryBase<Apisvr_GetGoalDetailsReq, Apisvr_GetGoalDetailsResp>, Apisvr_UserServiceGetGoalDetailsCall {
  override class var method: String { return "/apisvr.UserService/GetGoalDetails" }
}


/// Instantiate Apisvr_UserServiceServiceClient, then call methods of this protocol to make API calls.
internal protocol Apisvr_UserServiceService: ServiceClient {
  /// Synchronous. Unary.
  func getUserProfile(_ request: Apisvr_GetUserProfileReq, metadata customMetadata: Metadata) throws -> Apisvr_GetUserProfileResp
  /// Asynchronous. Unary.
  @discardableResult
  func getUserProfile(_ request: Apisvr_GetUserProfileReq, metadata customMetadata: Metadata, completion: @escaping (Apisvr_GetUserProfileResp?, CallResult) -> Void) throws -> Apisvr_UserServiceGetUserProfileCall

  /// Synchronous. Unary.
  func updateUserProfile(_ request: Apisvr_UpdateUserProfileReq, metadata customMetadata: Metadata) throws -> Apisvr_UpdateUserProfileResp
  /// Asynchronous. Unary.
  @discardableResult
  func updateUserProfile(_ request: Apisvr_UpdateUserProfileReq, metadata customMetadata: Metadata, completion: @escaping (Apisvr_UpdateUserProfileResp?, CallResult) -> Void) throws -> Apisvr_UserServiceUpdateUserProfileCall

  /// Synchronous. Unary.
  func getUserFavouriteItem(_ request: Apisvr_GetUserFavouriteItemReq, metadata customMetadata: Metadata) throws -> Apisvr_GetUserFavouriteItemResp
  /// Asynchronous. Unary.
  @discardableResult
  func getUserFavouriteItem(_ request: Apisvr_GetUserFavouriteItemReq, metadata customMetadata: Metadata, completion: @escaping (Apisvr_GetUserFavouriteItemResp?, CallResult) -> Void) throws -> Apisvr_UserServiceGetUserFavouriteItemCall

  /// Synchronous. Unary.
  func addUserFavouriteItem(_ request: Apisvr_AddUserFavouriteItemReq, metadata customMetadata: Metadata) throws -> Apisvr_AddUserFavouriteItemResp
  /// Asynchronous. Unary.
  @discardableResult
  func addUserFavouriteItem(_ request: Apisvr_AddUserFavouriteItemReq, metadata customMetadata: Metadata, completion: @escaping (Apisvr_AddUserFavouriteItemResp?, CallResult) -> Void) throws -> Apisvr_UserServiceAddUserFavouriteItemCall

  /// Synchronous. Unary.
  func removeFavouriteItem(_ request: Apisvr_RemoveFavouriteItemReq, metadata customMetadata: Metadata) throws -> Apisvr_RemoveUserFavouriteItemResp
  /// Asynchronous. Unary.
  @discardableResult
  func removeFavouriteItem(_ request: Apisvr_RemoveFavouriteItemReq, metadata customMetadata: Metadata, completion: @escaping (Apisvr_RemoveUserFavouriteItemResp?, CallResult) -> Void) throws -> Apisvr_UserServiceRemoveFavouriteItemCall

  /// Synchronous. Unary.
  func getGoalDetails(_ request: Apisvr_GetGoalDetailsReq, metadata customMetadata: Metadata) throws -> Apisvr_GetGoalDetailsResp
  /// Asynchronous. Unary.
  @discardableResult
  func getGoalDetails(_ request: Apisvr_GetGoalDetailsReq, metadata customMetadata: Metadata, completion: @escaping (Apisvr_GetGoalDetailsResp?, CallResult) -> Void) throws -> Apisvr_UserServiceGetGoalDetailsCall

}

internal extension Apisvr_UserServiceService {
  /// Synchronous. Unary.
  func getUserProfile(_ request: Apisvr_GetUserProfileReq) throws -> Apisvr_GetUserProfileResp {
    return try self.getUserProfile(request, metadata: self.metadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  func getUserProfile(_ request: Apisvr_GetUserProfileReq, completion: @escaping (Apisvr_GetUserProfileResp?, CallResult) -> Void) throws -> Apisvr_UserServiceGetUserProfileCall {
    return try self.getUserProfile(request, metadata: self.metadata, completion: completion)
  }

  /// Synchronous. Unary.
  func updateUserProfile(_ request: Apisvr_UpdateUserProfileReq) throws -> Apisvr_UpdateUserProfileResp {
    return try self.updateUserProfile(request, metadata: self.metadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  func updateUserProfile(_ request: Apisvr_UpdateUserProfileReq, completion: @escaping (Apisvr_UpdateUserProfileResp?, CallResult) -> Void) throws -> Apisvr_UserServiceUpdateUserProfileCall {
    return try self.updateUserProfile(request, metadata: self.metadata, completion: completion)
  }

  /// Synchronous. Unary.
  func getUserFavouriteItem(_ request: Apisvr_GetUserFavouriteItemReq) throws -> Apisvr_GetUserFavouriteItemResp {
    return try self.getUserFavouriteItem(request, metadata: self.metadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  func getUserFavouriteItem(_ request: Apisvr_GetUserFavouriteItemReq, completion: @escaping (Apisvr_GetUserFavouriteItemResp?, CallResult) -> Void) throws -> Apisvr_UserServiceGetUserFavouriteItemCall {
    return try self.getUserFavouriteItem(request, metadata: self.metadata, completion: completion)
  }

  /// Synchronous. Unary.
  func addUserFavouriteItem(_ request: Apisvr_AddUserFavouriteItemReq) throws -> Apisvr_AddUserFavouriteItemResp {
    return try self.addUserFavouriteItem(request, metadata: self.metadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  func addUserFavouriteItem(_ request: Apisvr_AddUserFavouriteItemReq, completion: @escaping (Apisvr_AddUserFavouriteItemResp?, CallResult) -> Void) throws -> Apisvr_UserServiceAddUserFavouriteItemCall {
    return try self.addUserFavouriteItem(request, metadata: self.metadata, completion: completion)
  }

  /// Synchronous. Unary.
  func removeFavouriteItem(_ request: Apisvr_RemoveFavouriteItemReq) throws -> Apisvr_RemoveUserFavouriteItemResp {
    return try self.removeFavouriteItem(request, metadata: self.metadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  func removeFavouriteItem(_ request: Apisvr_RemoveFavouriteItemReq, completion: @escaping (Apisvr_RemoveUserFavouriteItemResp?, CallResult) -> Void) throws -> Apisvr_UserServiceRemoveFavouriteItemCall {
    return try self.removeFavouriteItem(request, metadata: self.metadata, completion: completion)
  }

  /// Synchronous. Unary.
  func getGoalDetails(_ request: Apisvr_GetGoalDetailsReq) throws -> Apisvr_GetGoalDetailsResp {
    return try self.getGoalDetails(request, metadata: self.metadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  func getGoalDetails(_ request: Apisvr_GetGoalDetailsReq, completion: @escaping (Apisvr_GetGoalDetailsResp?, CallResult) -> Void) throws -> Apisvr_UserServiceGetGoalDetailsCall {
    return try self.getGoalDetails(request, metadata: self.metadata, completion: completion)
  }

}

internal final class Apisvr_UserServiceServiceClient: ServiceClientBase, Apisvr_UserServiceService {
  /// Synchronous. Unary.
  internal func getUserProfile(_ request: Apisvr_GetUserProfileReq, metadata customMetadata: Metadata) throws -> Apisvr_GetUserProfileResp {
    return try Apisvr_UserServiceGetUserProfileCallBase(channel)
      .run(request: request, metadata: customMetadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  internal func getUserProfile(_ request: Apisvr_GetUserProfileReq, metadata customMetadata: Metadata, completion: @escaping (Apisvr_GetUserProfileResp?, CallResult) -> Void) throws -> Apisvr_UserServiceGetUserProfileCall {
    return try Apisvr_UserServiceGetUserProfileCallBase(channel)
      .start(request: request, metadata: customMetadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func updateUserProfile(_ request: Apisvr_UpdateUserProfileReq, metadata customMetadata: Metadata) throws -> Apisvr_UpdateUserProfileResp {
    return try Apisvr_UserServiceUpdateUserProfileCallBase(channel)
      .run(request: request, metadata: customMetadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  internal func updateUserProfile(_ request: Apisvr_UpdateUserProfileReq, metadata customMetadata: Metadata, completion: @escaping (Apisvr_UpdateUserProfileResp?, CallResult) -> Void) throws -> Apisvr_UserServiceUpdateUserProfileCall {
    return try Apisvr_UserServiceUpdateUserProfileCallBase(channel)
      .start(request: request, metadata: customMetadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func getUserFavouriteItem(_ request: Apisvr_GetUserFavouriteItemReq, metadata customMetadata: Metadata) throws -> Apisvr_GetUserFavouriteItemResp {
    return try Apisvr_UserServiceGetUserFavouriteItemCallBase(channel)
      .run(request: request, metadata: customMetadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  internal func getUserFavouriteItem(_ request: Apisvr_GetUserFavouriteItemReq, metadata customMetadata: Metadata, completion: @escaping (Apisvr_GetUserFavouriteItemResp?, CallResult) -> Void) throws -> Apisvr_UserServiceGetUserFavouriteItemCall {
    return try Apisvr_UserServiceGetUserFavouriteItemCallBase(channel)
      .start(request: request, metadata: customMetadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func addUserFavouriteItem(_ request: Apisvr_AddUserFavouriteItemReq, metadata customMetadata: Metadata) throws -> Apisvr_AddUserFavouriteItemResp {
    return try Apisvr_UserServiceAddUserFavouriteItemCallBase(channel)
      .run(request: request, metadata: customMetadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  internal func addUserFavouriteItem(_ request: Apisvr_AddUserFavouriteItemReq, metadata customMetadata: Metadata, completion: @escaping (Apisvr_AddUserFavouriteItemResp?, CallResult) -> Void) throws -> Apisvr_UserServiceAddUserFavouriteItemCall {
    return try Apisvr_UserServiceAddUserFavouriteItemCallBase(channel)
      .start(request: request, metadata: customMetadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func removeFavouriteItem(_ request: Apisvr_RemoveFavouriteItemReq, metadata customMetadata: Metadata) throws -> Apisvr_RemoveUserFavouriteItemResp {
    return try Apisvr_UserServiceRemoveFavouriteItemCallBase(channel)
      .run(request: request, metadata: customMetadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  internal func removeFavouriteItem(_ request: Apisvr_RemoveFavouriteItemReq, metadata customMetadata: Metadata, completion: @escaping (Apisvr_RemoveUserFavouriteItemResp?, CallResult) -> Void) throws -> Apisvr_UserServiceRemoveFavouriteItemCall {
    return try Apisvr_UserServiceRemoveFavouriteItemCallBase(channel)
      .start(request: request, metadata: customMetadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func getGoalDetails(_ request: Apisvr_GetGoalDetailsReq, metadata customMetadata: Metadata) throws -> Apisvr_GetGoalDetailsResp {
    return try Apisvr_UserServiceGetGoalDetailsCallBase(channel)
      .run(request: request, metadata: customMetadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  internal func getGoalDetails(_ request: Apisvr_GetGoalDetailsReq, metadata customMetadata: Metadata, completion: @escaping (Apisvr_GetGoalDetailsResp?, CallResult) -> Void) throws -> Apisvr_UserServiceGetGoalDetailsCall {
    return try Apisvr_UserServiceGetGoalDetailsCallBase(channel)
      .start(request: request, metadata: customMetadata, completion: completion)
  }

}

/// To build a server, implement a class that conforms to this protocol.
/// If one of the methods returning `ServerStatus?` returns nil,
/// it is expected that you have already returned a status to the client by means of `session.close`.
internal protocol Apisvr_UserServiceProvider: ServiceProvider {
  func getUserProfile(request: Apisvr_GetUserProfileReq, session: Apisvr_UserServiceGetUserProfileSession) throws -> Apisvr_GetUserProfileResp
  func updateUserProfile(request: Apisvr_UpdateUserProfileReq, session: Apisvr_UserServiceUpdateUserProfileSession) throws -> Apisvr_UpdateUserProfileResp
  func getUserFavouriteItem(request: Apisvr_GetUserFavouriteItemReq, session: Apisvr_UserServiceGetUserFavouriteItemSession) throws -> Apisvr_GetUserFavouriteItemResp
  func addUserFavouriteItem(request: Apisvr_AddUserFavouriteItemReq, session: Apisvr_UserServiceAddUserFavouriteItemSession) throws -> Apisvr_AddUserFavouriteItemResp
  func removeFavouriteItem(request: Apisvr_RemoveFavouriteItemReq, session: Apisvr_UserServiceRemoveFavouriteItemSession) throws -> Apisvr_RemoveUserFavouriteItemResp
  func getGoalDetails(request: Apisvr_GetGoalDetailsReq, session: Apisvr_UserServiceGetGoalDetailsSession) throws -> Apisvr_GetGoalDetailsResp
}

extension Apisvr_UserServiceProvider {
  internal var serviceName: String { return "apisvr.UserService" }

  /// Determines and calls the appropriate request handler, depending on the request's method.
  /// Throws `HandleMethodError.unknownMethod` for methods not handled by this service.
  internal func handleMethod(_ method: String, handler: Handler) throws -> ServerStatus? {
    switch method {
    case "/apisvr.UserService/GetUserProfile":
      return try Apisvr_UserServiceGetUserProfileSessionBase(
        handler: handler,
        providerBlock: { try self.getUserProfile(request: $0, session: $1 as! Apisvr_UserServiceGetUserProfileSessionBase) })
          .run()
    case "/apisvr.UserService/UpdateUserProfile":
      return try Apisvr_UserServiceUpdateUserProfileSessionBase(
        handler: handler,
        providerBlock: { try self.updateUserProfile(request: $0, session: $1 as! Apisvr_UserServiceUpdateUserProfileSessionBase) })
          .run()
    case "/apisvr.UserService/GetUserFavouriteItem":
      return try Apisvr_UserServiceGetUserFavouriteItemSessionBase(
        handler: handler,
        providerBlock: { try self.getUserFavouriteItem(request: $0, session: $1 as! Apisvr_UserServiceGetUserFavouriteItemSessionBase) })
          .run()
    case "/apisvr.UserService/AddUserFavouriteItem":
      return try Apisvr_UserServiceAddUserFavouriteItemSessionBase(
        handler: handler,
        providerBlock: { try self.addUserFavouriteItem(request: $0, session: $1 as! Apisvr_UserServiceAddUserFavouriteItemSessionBase) })
          .run()
    case "/apisvr.UserService/RemoveFavouriteItem":
      return try Apisvr_UserServiceRemoveFavouriteItemSessionBase(
        handler: handler,
        providerBlock: { try self.removeFavouriteItem(request: $0, session: $1 as! Apisvr_UserServiceRemoveFavouriteItemSessionBase) })
          .run()
    case "/apisvr.UserService/GetGoalDetails":
      return try Apisvr_UserServiceGetGoalDetailsSessionBase(
        handler: handler,
        providerBlock: { try self.getGoalDetails(request: $0, session: $1 as! Apisvr_UserServiceGetGoalDetailsSessionBase) })
          .run()
    default:
      throw HandleMethodError.unknownMethod
    }
  }
}

internal protocol Apisvr_UserServiceGetUserProfileSession: ServerSessionUnary {}

fileprivate final class Apisvr_UserServiceGetUserProfileSessionBase: ServerSessionUnaryBase<Apisvr_GetUserProfileReq, Apisvr_GetUserProfileResp>, Apisvr_UserServiceGetUserProfileSession {}

internal protocol Apisvr_UserServiceUpdateUserProfileSession: ServerSessionUnary {}

fileprivate final class Apisvr_UserServiceUpdateUserProfileSessionBase: ServerSessionUnaryBase<Apisvr_UpdateUserProfileReq, Apisvr_UpdateUserProfileResp>, Apisvr_UserServiceUpdateUserProfileSession {}

internal protocol Apisvr_UserServiceGetUserFavouriteItemSession: ServerSessionUnary {}

fileprivate final class Apisvr_UserServiceGetUserFavouriteItemSessionBase: ServerSessionUnaryBase<Apisvr_GetUserFavouriteItemReq, Apisvr_GetUserFavouriteItemResp>, Apisvr_UserServiceGetUserFavouriteItemSession {}

internal protocol Apisvr_UserServiceAddUserFavouriteItemSession: ServerSessionUnary {}

fileprivate final class Apisvr_UserServiceAddUserFavouriteItemSessionBase: ServerSessionUnaryBase<Apisvr_AddUserFavouriteItemReq, Apisvr_AddUserFavouriteItemResp>, Apisvr_UserServiceAddUserFavouriteItemSession {}

internal protocol Apisvr_UserServiceRemoveFavouriteItemSession: ServerSessionUnary {}

fileprivate final class Apisvr_UserServiceRemoveFavouriteItemSessionBase: ServerSessionUnaryBase<Apisvr_RemoveFavouriteItemReq, Apisvr_RemoveUserFavouriteItemResp>, Apisvr_UserServiceRemoveFavouriteItemSession {}

internal protocol Apisvr_UserServiceGetGoalDetailsSession: ServerSessionUnary {}

fileprivate final class Apisvr_UserServiceGetGoalDetailsSessionBase: ServerSessionUnaryBase<Apisvr_GetGoalDetailsReq, Apisvr_GetGoalDetailsResp>, Apisvr_UserServiceGetGoalDetailsSession {}

